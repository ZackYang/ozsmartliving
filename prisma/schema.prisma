// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id          Int        @id @default(autoincrement())
  url         String
  order       Int        @default(0)
  description String
  Product     Product?   @relation(fields: [productId], references: [id])
  productId   Int?
  Variation   Variation? @relation(fields: [variationId], references: [id])
  variationId Int?
}

enum ProductType {
  sheerCurtain
  blockoutCurtain
  doubleCuratin
}

model Product {
  id               Int         @id @default(autoincrement())
  Permalink        String
  type             ProductType
  name             String
  code             String
  supplierName     String
  unitPrice        Float
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  disabled         Boolean     @default(false)
  archived         Boolean     @default(false)
  careInstructions String
  variations       Variation[]
  images           Image[]
}

model Variation {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  disabled         Boolean    @default(false)
  archived         Boolean    @default(false)
  unitPrice        Float
  name             String
  code             String
  careInstructions String     @map("care_instructions")
  composition      String
  shadingRate      Int
  energyEfficiency Int
  daytimePrivacy   Int
  nightimePrivacy  Int
  product          Product    @relation(fields: [productId], references: [id])
  productId        Int
  images           Image[]
  LineItem         LineItem[]
}

model LineItem {
  id           Int       @id @default(autoincrement())
  reference    String    @unique @default(cuid())
  variation    Variation @relation(fields: [variationId], references: [id])
  specfication Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  archivedAt   DateTime?
  quantity     Int
  total        Float
  Order        Order?    @relation(fields: [orderId], references: [id])
  orderId      Int
  variationId  Int
}

enum OrderStatus {
  pending
  paid
  cooled
  productionBooked
  producting
  internalShipping
  internaReceived
  internaPackaged
  shipped
  delivered
  cancelled
}

model Order {
  id                 Int         @id @default(autoincrement())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  paidAt             DateTime?
  cooledAt           DateTime?
  productionBookedAt DateTime?
  internalShippedAt  DateTime?
  internalReceivedAt DateTime?
  internalPackagedAt DateTime?
  shippedAt          DateTime?
  deliveredAt        DateTime?
  cancelledAt        DateTime?
  archivedAt         DateTime?
  notes              String?
  status             OrderStatus @default(pending)
  archivedReason     String?
  lines              LineItem[]
  total              Float
  gst                Float
  User               User        @relation(fields: [userId], references: [id])
  userId             Int
}

model Address {
  id       Int     @id @default(autoincrement())
  unit     String?
  street   String
  street2  String?
  city     String
  state    String
  postcode String
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  disabled  Boolean  @default(false)
  archived  Boolean  @default(false)
  email     String   @unique
  phone     String?
  name      String?
  password  String?
  orders    Order[]
  Address   Address?
}
